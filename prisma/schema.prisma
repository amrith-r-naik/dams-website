datasource db {
  provider = "postgresql" // Or any other database you are using
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth models for authentication

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  password      String? // Storing password hashes
  emailVerified DateTime?
  image         String?

  accounts Account[] // One user can have multiple accounts (OAuth)
  sessions Session[] // One user can have multiple sessions
  role     Role      @default(USER)
  shelter  Shelter? // If the user is a shelter staff

  favorites Favorite[] // Adopters can mark dogs as favorites
  adoptions Adoption[] // Adopters can submit adoption applications
  reviews   Review[] // Adopters can leave reviews

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

// Custom models for your app

model Shelter {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  phoneNumber String
  dogs        Dog[] // A shelter can have many dogs
  staffId     Int      @unique
  staff       User     @relation(fields: [staffId], references: [id]) // Link to User model
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Dog {
  id          Int        @id @default(autoincrement())
  name        String
  age         Int
  description String
  status      DogStatus
  imageUrl    String[]
  shelterId   Int
  shelter     Shelter    @relation(fields: [shelterId], references: [id])
  favorites   Favorite[] // A dog can be marked as favorite by many adopters
  adoptions   Adoption[] // A dog can have multiple adoption applications
  reviews     Review[] // Reviews left for the dog
  breedId     Int?
  breed       DogBreed?  @relation(fields: [breedId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model DogBreed {
  id                   Int     @id @default(autoincrement())
  name                 String  @unique
  countryOfOrigin      String?
  furColor             String?
  height               String?
  eyeColor             String?
  longevity            String?
  characterTraits      String?
  commonHealthProblems String?
  imageUrl             String?
  dogs                 Dog[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  dogId     Int
  dog       Dog      @relation(fields: [dogId], references: [id])
  createdAt DateTime @default(now())
}

model Adoption {
  id              Int            @id @default(autoincrement())
  userId          Int
  user            User           @relation(fields: [userId], references: [id])
  dogId           Int
  dog             Dog            @relation(fields: [dogId], references: [id])
  status          AdoptionStatus
  applicationForm String
  updatedAt       DateTime       @updatedAt
  createdAt       DateTime       @default(now())
}

model Review {
  id         Int      @id @default(autoincrement())
  content    String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  dogId      Int
  dog        Dog      @relation(fields: [dogId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isApproved Boolean  @default(false)
}

model Notification {
  id          Int      @id @default(autoincrement())
  content     String
  isRead      Boolean  @default(false)
  recipientId Int
  recipient   User     @relation(fields: [recipientId], references: [id])
  createdAt   DateTime @default(now())
}

enum DogStatus {
  AVAILABLE
  UNAVAILABLE
  ADOPTED
  DECEASED
}

enum AdoptionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  SHELTER_STAFF
  ADMIN
}
