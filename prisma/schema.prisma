generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  adoptions     Adoption[]
  favorites     Favorite[]
  Notification  Notification[]
  reviews       Review[]
  sessions      Session[]
  shelter       Shelter?
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Shelter {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  phoneNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  staffId     Int      @unique
  dogs        Dog[]
  staff       User     @relation(fields: [staffId], references: [id])
}

model Dog {
  id          Int        @id @default(autoincrement())
  name        String
  age         Int
  status      DogStatus
  shelterId   Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String
  breedId     Int?
  imageUrl    String[]
  adoptions   Adoption[]
  breed       DogBreed?  @relation(fields: [breedId], references: [id])
  shelter     Shelter    @relation(fields: [shelterId], references: [id])
  favorites   Favorite[]
  reviews     Review[]
}

model DogBreed {
  id                   Int     @id @default(autoincrement())
  name                 String  @unique
  countryOfOrigin      String?
  furColor             String?
  height               String?
  eyeColor             String?
  longevity            String?
  characterTraits      String?
  commonHealthProblems String?
  imageUrl             String?
  dogs                 Dog[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  dogId     Int
  createdAt DateTime @default(now())
  userId    Int
  dog       Dog      @relation(fields: [dogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, dogId])
}

model Adoption {
  id              Int            @id @default(autoincrement())
  dogId           Int
  status          AdoptionStatus
  applicationForm String
  updatedAt       DateTime       @updatedAt
  createdAt       DateTime       @default(now())
  userId          Int
  dog             Dog            @relation(fields: [dogId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  content    String
  dogId      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isApproved Boolean  @default(false)
  userId     Int
  dog        Dog      @relation(fields: [dogId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  content     String
  isRead      Boolean  @default(false)
  recipientId Int
  createdAt   DateTime @default(now())
  recipient   User     @relation(fields: [recipientId], references: [id])
}

enum DogStatus {
  AVAILABLE
  UNAVAILABLE
  ADOPTED
  DECEASED
}

enum AdoptionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  SHELTER_STAFF
  ADMIN
}
